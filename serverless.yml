service: mtr-hk-fastapi
#aws dynamodb batch-write-item --request-items file://initial_data.json
#aws invoke -f function -p event.json
#aws deploy -f function

plugins:
  - serverless-python-requirements

package:
  patterns:
    - "!node_modules/**"
    - "!.requirements/**"
    - "!env/**"
    - "!README.md"
    - "!package.json"
    - "!package-lock.json"
    - "!requirements.txt"
    - "!initial_data.json"
    - "!event.json"
    - "!.vscode/**"
    - "!.env"
    - "!.nginx/**"
    - "!docker-compose.yml"
    - "!Dockerfile"

custom:
  pythonRequirements:
    dockerizePip: non-linux
  default_stage: dev
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: mtr-hk-${self:custom.stage}-fastapi
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete
  dynamodb_host: https://dynamodb.${self:custom.region}.amazonaws.com
  dynamodb_table: ${self:custom.stack_name}-table
  dynamodb_arn: arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.dynamodb_table}

provider:
  name: aws
  runtime: python3.8
  region: ap-east-1
  lambdaHashingVersion: 20201221
  profile: mtr
  apiName: ${self:custom.stack_name}-api-gateway
  deploymentBucket:
    name: mtr-hk-code-bucket
  deploymentPrefix: serverless
  apiGateway:
    usagePlan:
      quota:
        limit: 5000
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
  environment:
    DYNAMODB_HOST: ${self:custom.dynamodb_host}
    DYNAMODB_TABLE: ${self:custom.dynamodb_table}
    REGION: ${self:custom.region}
    STAGE: ${self:custom.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource: 
            - ${self:custom.dynamodb_arn}

# Lambda Function Defination 
functions:
  app:
    handler: app.main.handler
    package: {}
    name: ${self:custom.stack_name}-app
    description: fastapi
    timeout: 10
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
# Comment dataDynamoDbTable if using existing table
    dataDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.deletion_policy}
      Properties:
        AttributeDefinitions:
          -
            AttributeName: item_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: item_id
            KeyType: HASH        
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.dynamodb_table}