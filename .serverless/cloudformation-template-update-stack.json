{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "IngestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/mtr-hk-dev-api-ingest"
      }
    },
    "BucketLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/mtr-hk-dev-api-ingest-bucket"
      }
    },
    "ListLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/mtr-hk-dev-api-ingest-list"
      }
    },
    "DeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/mtr-hk-dev-api-ingest-delete"
      }
    },
    "InfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/mtr-hk-dev-api-ingest-info"
      }
    },
    "QueryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/mtr-hk-dev-api-query"
      }
    },
    "QueryInfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/mtr-hk-dev-api-query-info"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "mtr-hk-api",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-bucket:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-list:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-delete:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-info:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-query:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-query-info:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-bucket:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-list:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-delete:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-ingest-info:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-query:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/mtr-hk-dev-api-query-info:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:DescribeTable"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:ap-east-1:*:table/mtr-hk-dev-api-ingest",
                    "arn:aws:dynamodb:ap-east-1:*:table/mtr-hk-dev-api-ingest/index/*",
                    "arn:aws:dynamodb:ap-east-1:*:table/mtr-hk-dev-api-ingest-key",
                    "arn:aws:dynamodb:ap-east-1:*:table/mtr-hk-dev-api-ingest-path",
                    "arn:aws:dynamodb:ap-east-1:*:table/mtr-hk-dev-api-query-key",
                    "arn:aws:dynamodb:ap-east-1:*:table/mtr-hk-dev-api-query",
                    "arn:aws:dynamodb:ap-east-1:*:table/mtr-hk-dev-api-query/index/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "athena:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "glue:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "mtr-hk-api",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "IngestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/mtr-hk-api.zip"
        },
        "Handler": "ingest/ingest.ingest",
        "Runtime": "python3.8",
        "FunctionName": "mtr-hk-dev-api-ingest",
        "MemorySize": 1024,
        "Timeout": 10,
        "Description": "Generate a presigned URL for PUT upload / Direct upload",
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "mtr-hk-dev-api-ingest",
            "DYNAMODB_TABLE_KEY": "mtr-hk-dev-api-ingest-key",
            "DYNAMODB_TABLE_PATH": "mtr-hk-dev-api-ingest-path",
            "DYNAMODB_TABLE_QUERY": "mtr-hk-dev-api-query",
            "DYNAMODB_TABLE_QUERY_KEY": "mtr-hk-dev-api-query-key",
            "DYNAMODB_HOST": "https://dynamodb.ap-east-1.amazonaws.com",
            "REGION": "ap-east-1",
            "S3_BUCKET": "mtr-hk-dev-api-bucket",
            "S3_BUCKET_QUERY": "aws-athena-query-results-834356164989-ap-east-1",
            "URL_DEFAULT_TTL": "60",
            "QUERY_DEFAULT_TTL": "10",
            "DYNAMODB_INDEX": "key_time_LSI",
            "DYNAMODB_INDEX_QUERY": "key_status_GSI",
            "QUERY_CONCURRENT_LIMIT": "10",
            "QUERY_DEFAULT_WAITING_TIME": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IngestLogGroup"
      ]
    },
    "BucketLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/mtr-hk-api.zip"
        },
        "Handler": "ingest/bucket.event",
        "Runtime": "python3.8",
        "FunctionName": "mtr-hk-dev-api-ingest-bucket",
        "MemorySize": 1024,
        "Timeout": 10,
        "Description": "Called by s3 create/remove events to manage asset state in dynamodb",
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "mtr-hk-dev-api-ingest",
            "DYNAMODB_TABLE_KEY": "mtr-hk-dev-api-ingest-key",
            "DYNAMODB_TABLE_PATH": "mtr-hk-dev-api-ingest-path",
            "DYNAMODB_TABLE_QUERY": "mtr-hk-dev-api-query",
            "DYNAMODB_TABLE_QUERY_KEY": "mtr-hk-dev-api-query-key",
            "DYNAMODB_HOST": "https://dynamodb.ap-east-1.amazonaws.com",
            "REGION": "ap-east-1",
            "S3_BUCKET": "mtr-hk-dev-api-bucket",
            "S3_BUCKET_QUERY": "aws-athena-query-results-834356164989-ap-east-1",
            "URL_DEFAULT_TTL": "60",
            "QUERY_DEFAULT_TTL": "10",
            "DYNAMODB_INDEX": "key_time_LSI",
            "DYNAMODB_INDEX_QUERY": "key_status_GSI",
            "QUERY_CONCURRENT_LIMIT": "10",
            "QUERY_DEFAULT_WAITING_TIME": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "BucketLogGroup"
      ]
    },
    "ListLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/mtr-hk-api.zip"
        },
        "Handler": "ingest/list.asset_list",
        "Runtime": "python3.8",
        "FunctionName": "mtr-hk-dev-api-ingest-list",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "List all assets -> Generate create record of specific day",
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "mtr-hk-dev-api-ingest",
            "DYNAMODB_TABLE_KEY": "mtr-hk-dev-api-ingest-key",
            "DYNAMODB_TABLE_PATH": "mtr-hk-dev-api-ingest-path",
            "DYNAMODB_TABLE_QUERY": "mtr-hk-dev-api-query",
            "DYNAMODB_TABLE_QUERY_KEY": "mtr-hk-dev-api-query-key",
            "DYNAMODB_HOST": "https://dynamodb.ap-east-1.amazonaws.com",
            "REGION": "ap-east-1",
            "S3_BUCKET": "mtr-hk-dev-api-bucket",
            "S3_BUCKET_QUERY": "aws-athena-query-results-834356164989-ap-east-1",
            "URL_DEFAULT_TTL": "60",
            "QUERY_DEFAULT_TTL": "10",
            "DYNAMODB_INDEX": "key_time_LSI",
            "DYNAMODB_INDEX_QUERY": "key_status_GSI",
            "QUERY_CONCURRENT_LIMIT": "10",
            "QUERY_DEFAULT_WAITING_TIME": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListLogGroup"
      ]
    },
    "DeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/mtr-hk-api.zip"
        },
        "Handler": "ingest/delete.delete",
        "Runtime": "python3.8",
        "FunctionName": "mtr-hk-dev-api-ingest-delete",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Delete an asset by <project>, <dataset>, <file-name> and <file-format>",
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "mtr-hk-dev-api-ingest",
            "DYNAMODB_TABLE_KEY": "mtr-hk-dev-api-ingest-key",
            "DYNAMODB_TABLE_PATH": "mtr-hk-dev-api-ingest-path",
            "DYNAMODB_TABLE_QUERY": "mtr-hk-dev-api-query",
            "DYNAMODB_TABLE_QUERY_KEY": "mtr-hk-dev-api-query-key",
            "DYNAMODB_HOST": "https://dynamodb.ap-east-1.amazonaws.com",
            "REGION": "ap-east-1",
            "S3_BUCKET": "mtr-hk-dev-api-bucket",
            "S3_BUCKET_QUERY": "aws-athena-query-results-834356164989-ap-east-1",
            "URL_DEFAULT_TTL": "60",
            "QUERY_DEFAULT_TTL": "10",
            "DYNAMODB_INDEX": "key_time_LSI",
            "DYNAMODB_INDEX_QUERY": "key_status_GSI",
            "QUERY_CONCURRENT_LIMIT": "10",
            "QUERY_DEFAULT_WAITING_TIME": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteLogGroup"
      ]
    },
    "InfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/mtr-hk-api.zip"
        },
        "Handler": "ingest/info.info",
        "Runtime": "python3.8",
        "FunctionName": "mtr-hk-dev-api-ingest-info",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Get info of corresponding api-key, info from dynamodb columns",
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "mtr-hk-dev-api-ingest",
            "DYNAMODB_TABLE_KEY": "mtr-hk-dev-api-ingest-key",
            "DYNAMODB_TABLE_PATH": "mtr-hk-dev-api-ingest-path",
            "DYNAMODB_TABLE_QUERY": "mtr-hk-dev-api-query",
            "DYNAMODB_TABLE_QUERY_KEY": "mtr-hk-dev-api-query-key",
            "DYNAMODB_HOST": "https://dynamodb.ap-east-1.amazonaws.com",
            "REGION": "ap-east-1",
            "S3_BUCKET": "mtr-hk-dev-api-bucket",
            "S3_BUCKET_QUERY": "aws-athena-query-results-834356164989-ap-east-1",
            "URL_DEFAULT_TTL": "60",
            "QUERY_DEFAULT_TTL": "10",
            "DYNAMODB_INDEX": "key_time_LSI",
            "DYNAMODB_INDEX_QUERY": "key_status_GSI",
            "QUERY_CONCURRENT_LIMIT": "10",
            "QUERY_DEFAULT_WAITING_TIME": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "InfoLogGroup"
      ]
    },
    "QueryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/mtr-hk-api.zip"
        },
        "Handler": "query/query.query",
        "Runtime": "python3.8",
        "FunctionName": "mtr-hk-dev-api-query",
        "MemorySize": 1024,
        "Timeout": 28,
        "Description": "To query any dataset",
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "mtr-hk-dev-api-ingest",
            "DYNAMODB_TABLE_KEY": "mtr-hk-dev-api-ingest-key",
            "DYNAMODB_TABLE_PATH": "mtr-hk-dev-api-ingest-path",
            "DYNAMODB_TABLE_QUERY": "mtr-hk-dev-api-query",
            "DYNAMODB_TABLE_QUERY_KEY": "mtr-hk-dev-api-query-key",
            "DYNAMODB_HOST": "https://dynamodb.ap-east-1.amazonaws.com",
            "REGION": "ap-east-1",
            "S3_BUCKET": "mtr-hk-dev-api-bucket",
            "S3_BUCKET_QUERY": "aws-athena-query-results-834356164989-ap-east-1",
            "URL_DEFAULT_TTL": "60",
            "QUERY_DEFAULT_TTL": "10",
            "DYNAMODB_INDEX": "key_time_LSI",
            "DYNAMODB_INDEX_QUERY": "key_status_GSI",
            "QUERY_CONCURRENT_LIMIT": "10",
            "QUERY_DEFAULT_WAITING_TIME": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "QueryLogGroup"
      ]
    },
    "QueryInfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/mtr-hk-api.zip"
        },
        "Handler": "query/info.info",
        "Runtime": "python3.8",
        "FunctionName": "mtr-hk-dev-api-query-info",
        "MemorySize": 1024,
        "Timeout": 10,
        "Description": "To get query info",
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE": "mtr-hk-dev-api-ingest",
            "DYNAMODB_TABLE_KEY": "mtr-hk-dev-api-ingest-key",
            "DYNAMODB_TABLE_PATH": "mtr-hk-dev-api-ingest-path",
            "DYNAMODB_TABLE_QUERY": "mtr-hk-dev-api-query",
            "DYNAMODB_TABLE_QUERY_KEY": "mtr-hk-dev-api-query-key",
            "DYNAMODB_HOST": "https://dynamodb.ap-east-1.amazonaws.com",
            "REGION": "ap-east-1",
            "S3_BUCKET": "mtr-hk-dev-api-bucket",
            "S3_BUCKET_QUERY": "aws-athena-query-results-834356164989-ap-east-1",
            "URL_DEFAULT_TTL": "60",
            "QUERY_DEFAULT_TTL": "10",
            "DYNAMODB_INDEX": "key_time_LSI",
            "DYNAMODB_INDEX_QUERY": "key_status_GSI",
            "QUERY_CONCURRENT_LIMIT": "10",
            "QUERY_DEFAULT_WAITING_TIME": "1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "QueryInfoLogGroup"
      ]
    },
    "IngestLambdaVersion6iPjr5OXFZFjg1DWrVHyayscz36YufFZP9L67Qtkw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "IngestLambdaFunction"
        },
        "CodeSha256": "4qszoYH2+bjRJpc/tr/4k7Ys1OO9ZyvX/oz8Z6IT7eY=",
        "Description": "Generate a presigned URL for PUT upload / Direct upload"
      }
    },
    "BucketLambdaVersionGkXOVcpqJJs2gFeL0WIXCo7oUxXsPbLlkPp8NYMasJU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BucketLambdaFunction"
        },
        "CodeSha256": "4qszoYH2+bjRJpc/tr/4k7Ys1OO9ZyvX/oz8Z6IT7eY=",
        "Description": "Called by s3 create/remove events to manage asset state in dynamodb"
      }
    },
    "ListLambdaVersionpCsMUWubDGLrZXKCvELWBdyCYws2HbF42mprfbbI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListLambdaFunction"
        },
        "CodeSha256": "4qszoYH2+bjRJpc/tr/4k7Ys1OO9ZyvX/oz8Z6IT7eY=",
        "Description": "List all assets -> Generate create record of specific day"
      }
    },
    "DeleteLambdaVersionSEN4GRyeIymumDGGfJodJrHynqNtdb2OBXJx5e4ZM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteLambdaFunction"
        },
        "CodeSha256": "4qszoYH2+bjRJpc/tr/4k7Ys1OO9ZyvX/oz8Z6IT7eY=",
        "Description": "Delete an asset by <project>, <dataset>, <file-name> and <file-format>"
      }
    },
    "InfoLambdaVersionUsksNwzXq7mIDWkCnb1VvqrLzHTLjMCXMuEHrPlOSYo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "InfoLambdaFunction"
        },
        "CodeSha256": "4qszoYH2+bjRJpc/tr/4k7Ys1OO9ZyvX/oz8Z6IT7eY=",
        "Description": "Get info of corresponding api-key, info from dynamodb columns"
      }
    },
    "QueryLambdaVersionEN07nTAzvuvZtjiWsLEke5y4yZkhWbWFJwKROXsOVg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "QueryLambdaFunction"
        },
        "CodeSha256": "4qszoYH2+bjRJpc/tr/4k7Ys1OO9ZyvX/oz8Z6IT7eY=",
        "Description": "To query any dataset"
      }
    },
    "QueryInfoLambdaVersionlaG7tsYTnFVi2suo6CtRZDKKIebulmR6R5FCaaw4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "QueryInfoLambdaFunction"
        },
        "CodeSha256": "4qszoYH2+bjRJpc/tr/4k7Ys1OO9ZyvX/oz8Z6IT7eY=",
        "Description": "To get query info"
      }
    },
    "BucketCustomS31": {
      "Type": "Custom::S3",
      "Version": 1,
      "DependsOn": [
        "BucketLambdaFunction",
        "CustomDashresourceDashexistingDashs3LambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashexistingDashs3LambdaFunction",
            "Arn"
          ]
        },
        "FunctionName": "mtr-hk-dev-api-ingest-bucket",
        "BucketName": "mtr-hk-dev-api-bucket",
        "BucketConfigs": [
          {
            "Event": "s3:ObjectCreated:*",
            "Rules": []
          }
        ]
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "mtr-hk-api",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "s3",
                        "",
                        "",
                        "mtr-hk-dev-api-bucket"
                      ]
                    ]
                  },
                  "Action": [
                    "s3:PutBucketNotification",
                    "s3:GetBucketNotification"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "lambda",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "function",
                        "*"
                      ]
                    ]
                  },
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashexistingDashs3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mtr-hk-code-bucket",
          "S3Key": "serverless/mtr-hk-api/dev/1614829765499-2021-03-04T03:49:25.499Z/custom-resources.zip"
        },
        "FunctionName": "mtr-hk-api-dev-custom-resource-existing-s3",
        "Handler": "s3/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "mtr-hk-dev-api-gateway",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceIngest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "ingest",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngest"
        },
        "PathPart": "{project}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVarDatasetVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngestProjectVar"
        },
        "PathPart": "{dataset}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVar"
        },
        "PathPart": "{file-name}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVar"
        },
        "PathPart": "{file-format}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVar"
        },
        "PathPart": "{year}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVar"
        },
        "PathPart": "{month}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVar"
        },
        "PathPart": "{day}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarMethodVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVar"
        },
        "PathPart": "{method}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIngestInfo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceIngest"
        },
        "PathPart": "info",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQuery": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "query",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQueryDatabaseVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceQuery"
        },
        "PathPart": "{database}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQueryDatabaseVarTableVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceQueryDatabaseVar"
        },
        "PathPart": "{table}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQueryInfo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceQuery"
        },
        "PathPart": "info",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarMethodVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarMethodVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodIngestProjectVarDatasetVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodIngestInfoOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestInfo"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodQueryDatabaseVarTableVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceQueryDatabaseVarTableVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodQueryInfoOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceQueryInfo"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarMethodVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {
          "method.request.path.project": true,
          "method.request.path.dataset": true,
          "method.request.path.file-name": true,
          "method.request.path.file-format": true,
          "method.request.path.method": true,
          "method.request.path.year": true,
          "method.request.path.month": true,
          "method.request.path.day": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarMethodVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "IngestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodIngestProjectVarDatasetVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.date": true,
          "method.request.querystring.source": true,
          "method.request.path.project": true,
          "method.request.path.dataset": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {
          "method.request.path.project": true,
          "method.request.path.dataset": true,
          "method.request.path.file-name": true,
          "method.request.path.file-format": true,
          "method.request.path.year": true,
          "method.request.path.month": true,
          "method.request.path.day": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodIngestInfoGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIngestInfo"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "InfoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodQueryDatabaseVarTableVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.where": true,
          "method.request.path.database": true,
          "method.request.path.table": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceQueryDatabaseVarTableVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "QueryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodQueryInfoGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceQueryInfo"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "QueryInfoLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1614829758827": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarMethodVarOptions",
        "ApiGatewayMethodIngestProjectVarDatasetVarOptions",
        "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarOptions",
        "ApiGatewayMethodIngestInfoOptions",
        "ApiGatewayMethodQueryDatabaseVarTableVarOptions",
        "ApiGatewayMethodQueryInfoOptions",
        "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarMethodVarPost",
        "ApiGatewayMethodIngestProjectVarDatasetVarGet",
        "ApiGatewayMethodIngestProjectVarDatasetVarFileDashnameVarFileDashformatVarYearVarMonthVarDayVarDelete",
        "ApiGatewayMethodIngestInfoGet",
        "ApiGatewayMethodQueryDatabaseVarTableVarGet",
        "ApiGatewayMethodQueryInfoGet"
      ]
    },
    "ApiGatewayUsagePlan": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": "ApiGatewayDeployment1614829758827",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Stage": "dev"
          }
        ],
        "Description": "Usage plan for mtr-hk-api dev stage",
        "UsagePlanName": "mtr-hk-api-dev",
        "Quota": {
          "Limit": 5000,
          "Period": "MONTH"
        },
        "Throttle": {
          "BurstLimit": 200,
          "RateLimit": 100
        }
      }
    },
    "IngestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "IngestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "InfoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "InfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "QueryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "QueryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "QueryInfoLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "QueryInfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "dataPathDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "project",
            "AttributeType": "S"
          },
          {
            "AttributeName": "dataset",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "project",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "dataset",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "mtr-hk-dev-api-ingest-path"
      }
    },
    "apiKeyDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "api_key",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "api_key",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "mtr-hk-dev-api-ingest-key"
      }
    },
    "ingestDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "api_key",
            "AttributeType": "S"
          },
          {
            "AttributeName": "s3_path",
            "AttributeType": "S"
          },
          {
            "AttributeName": "created_at",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "api_key",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "s3_path",
            "KeyType": "RANGE"
          }
        ],
        "LocalSecondaryIndexes": [
          {
            "IndexName": "key_time_LSI",
            "KeySchema": [
              {
                "AttributeName": "api_key",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "created_at",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "mtr-hk-dev-api-ingest"
      }
    },
    "queryKeyDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "api_key",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "api_key",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "mtr-hk-dev-api-query-key"
      }
    },
    "queryDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "query",
            "AttributeType": "S"
          },
          {
            "AttributeName": "api_key",
            "AttributeType": "S"
          },
          {
            "AttributeName": "state",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "query",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "key_status_GSI",
            "KeySchema": [
              {
                "AttributeName": "api_key",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "state",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "KEYS_ONLY"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "mtr-hk-dev-api-query"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "mtr-hk-code-bucket"
    },
    "IngestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "IngestLambdaVersion6iPjr5OXFZFjg1DWrVHyayscz36YufFZP9L67Qtkw"
      }
    },
    "BucketLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BucketLambdaVersionGkXOVcpqJJs2gFeL0WIXCo7oUxXsPbLlkPp8NYMasJU"
      }
    },
    "ListLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListLambdaVersionpCsMUWubDGLrZXKCvELWBdyCYws2HbF42mprfbbI"
      }
    },
    "DeleteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteLambdaVersionSEN4GRyeIymumDGGfJodJrHynqNtdb2OBXJx5e4ZM"
      }
    },
    "InfoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "InfoLambdaVersionUsksNwzXq7mIDWkCnb1VvqrLzHTLjMCXMuEHrPlOSYo"
      }
    },
    "QueryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "QueryLambdaVersionEN07nTAzvuvZtjiWsLEke5y4yZkhWbWFJwKROXsOVg"
      }
    },
    "QueryInfoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "QueryInfoLambdaVersionlaG7tsYTnFVi2suo6CtRZDKKIebulmR6R5FCaaw4"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}